class Vec{constructor(a,b,c,d){this.x=a,this.y=b,"number"==typeof c&&(this.z=c),"number"==typeof d&&(this.w=d)}}export class Vec2 extends Vec{constructor(a,b){super(a,b)}static add(c,a){return a instanceof Vec2?new Vec2(c.x+a.x,c.y+a.y):new Vec2(c.x+a,c.y+a)}static byPolarCoords(a,b){return new Vec2(a*Math.cos(b),a*Math.sin(b))}static distance(c,a){const b=c.x-a.x,d=c.y-a.y;return Math.sqrt(b*b+d*d)}static distanceChebyshev(c,a){return Math.max(Math.abs(c.x-a.x),Math.abs(c.y-a.y))}static distanceManhattan(c,a){return Math.sqrt(Math.abs(c.x-a.x)+Math.abs(c.y-a.y))}static distanceMinkowski(c,a,b){return(Math.abs(c.x-a.x)**b+Math.abs(c.y-a.y)**b)**(1/b)}static subtract(c,a){return a instanceof Vec2?new Vec2(c.x-a.x,c.y-a.y):new Vec2(c.x-a,c.y-a)}get angleX(){return Math.atan2(this.y,this.x)}get angleY(){return Math.atan2(this.x,this.y)}get magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y)}set limit(b){this.magnitude>b&&(this.normalize(),this.multiply(b))}set magnitude(b){this.normalize(),this.multiply(b)}add(b){b instanceof Vec2?(this.x+=b.x,this.y+=b.y):(this.x+=b,this.y+=b)}copy(b){this.x=b.x,this.y=b.y}normalize(){const a=this.magnitude;this.x/=a,this.y/=a}scale(b){this.x*=b,this.y*=b}subtract(b){b instanceof Vec2?(this.x-=b.x,this.y-=b.y):(this.x-=b,this.y-=b)}}export class Vec3 extends Vec{constructor(a,b,c){super(a,b,c)}static add(c,a){return a instanceof Vec3?new Vec3(c.x+a.x,c.y+a.y,c.z+a.z):new Vec3(c.x+a,c.y+a,c.z+a)}static distance(c,a){const b=c.x-a.x,d=c.y-a.y,e=c.z-a.z;return Math.sqrt(b*b+d*d+e*e)}static distanceChebyshev(c,a){return Math.max(Math.abs(c.x-a.x),Math.abs(c.y-a.y),Math.abs(c.z-a.z))}static distanceManhattan(c,a){return Math.sqrt(Math.abs(c.x-a.x)+Math.abs(c.y-a.y)+Math.abs(c.z-a.z))}static distanceMinkowski(c,a,b){return(Math.abs(c.x-a.x)**b+Math.abs(c.y-a.y)**b+Math.abs(c.z-a.z)**b)**(1/b)}static subtract(c,a){return a instanceof Vec3?new Vec3(c.x-a.x,c.y-a.y,c.z-a.z):new Vec3(c.x-a,c.y-a,c.z-a)}get angleX(){return Math.atan2(Math.sqrt(this.y**2+this.z**2),this.x)}get angleY(){return Math.atan2(Math.sqrt(this.x**2+this.z**2),this.y)}get angleZ(){return Math.atan2(Math.sqrt(this.x**2+this.y**2),this.z)}get magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}set limit(b){this.magnitude>b&&(this.normalize(),this.multiply(b))}set magnitude(b){this.normalize(),this.multiply(b)}add(b){b instanceof Vec3?(this.x+=b.x,this.y+=b.y,this.z+=b.z):(this.x+=b,this.y+=b,this.z+=b)}copy(b){this.x={...b}.x,this.y={...b}.y,this.z={...b}.z}normalize(){const a=this.magnitude;this.x/=a,this.y/=a,this.z/=a}scale(b){this.x*=b,this.y*=b,this.z*=b}subtract(b){b instanceof Vec3?(this.x-=b.x,this.y-=b.y,this.z-=b.z):(this.x-=b,this.y-=b,this.z-=b)}}export class Vec4 extends Vec{constructor(a,b,c,d){super(a,b,c,d)}static add(c,a){return a instanceof Vec4?new Vec4(c.x+a.x,c.y+a.y,c.z+a.z,c.w+a.w):new Vec4(c.x+a,c.y+a,c.z+a,c.w+a)}static distanceChebyshev(c,a){return Math.max(Math.abs(c.x-a.x),Math.abs(c.y-a.y),Math.abs(c.z-a.z),Math.abs(c.w-a.w))}static distanceEuclidian(c,a){const b=c.x-a.x,d=c.y-a.y,e=c.z-a.z,f=c.w-a.w;return Math.sqrt(b*b+d*d+e*e+f*f)}static distanceManhattan(c,a){return Math.sqrt(Math.abs(c.x-a.x)+Math.abs(c.y-a.y)+Math.abs(c.z-a.z)+Math.abs(c.w-a.w))}static distanceMinkowski(c,a,b){return(Math.abs(c.x-a.x)**b+Math.abs(c.y-a.y)**b+Math.abs(c.z-a.z)**b+Math.abs(c.w-a.w)**b)**(1/b)}static subtract(c,a){return a instanceof Vec4?new Vec4(c.x-a.x,c.y-a.y,c.z-a.z,c.w-a.w):new Vec4(c.x-a,c.y-a,c.z-a,c.w-a)}get angleX(){return Math.atan2(Math.sqrt(this.y**2+this.z**2),this.x)}get angleY(){return Math.atan2(Math.sqrt(this.x**2+this.z**2),this.y)}get angleZ(){return Math.atan2(Math.sqrt(this.x**2+this.y**2),this.z)}get magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}set limit(b){this.magnitude>b&&(this.normalize(),this.scale(b))}set magnitude(b){this.normalize(),this.scale(b)}add(b){b instanceof Vec4?(this.x+=b.x,this.y+=b.y,this.z+=b.z,this.w+=b.w):(this.x+=b,this.y+=b,this.z+=b,this.w+=b)}copy(b){this.x=b.x,this.y=b.y,this.z=b.z,this.w=b.w}normalize(){const a=this.magnitude;this.x/=a,this.y/=a,this.z/=a,this.w/=a}scale(b){this.x*=b,this.y*=b,this.z*=b,this.w*=b}subtract(b){b instanceof Vec4?(this.x-=b.x,this.y-=b.y,this.z-=b.z,this.w-=b.w):(this.x-=b,this.y-=b,this.z-=b,this.w-=b)}}