export class Vec2{constructor(x,y){this.x=x||0;this.y=y||0}static add(a,b){return new Vec2(a.x+b.x,a.y+b.y)}static angleBetween(a,b){const MA=a.magnitude;const MB=b.magnitude;if(MA===0||MB===0){console.error("Cannot divide by zero.");return NaN}return Math.acos(Vec2.dot(a,b)/(MA*MB))}static clone(a){return new Vec2(...a.xy)}static distance(a,b){const abx=a.x-b.x;const aby=a.y-b.y;return Math.sqrt(abx*abx+aby*aby)}static distanceChebyshev(a,b){return Math.max(Math.abs(a.x-b.x),Math.abs(a.y-b.y))}static distanceManhattan(a,b){return Math.sqrt(Math.abs(a.x-b.x)+Math.abs(a.y-b.y))}static distanceMinkowski(a,b,e){if(e===0){console.error("Cannot divide by zero.");return NaN}return(Math.abs(a.x-b.x)**e+Math.abs(a.y-b.y)**e)**(1/e)}static dot(a,b){return a.x*b.x+a.y*b.y}static equal(a,b){return a.x===b.x&&a.y===b.y}static fromCopy(a){return new Vec2({...a}.x,{...a}.y)}static fromPolarCoords(radius,phi){return new Vec2(radius*Math.cos(phi),radius*Math.sin(phi))}static project(a,b){const PM=a.magnitude*Math.cos(Vec2.angleBetween(a,b));const P=Vec2.clone(b);P.normalize();P.scale(PM);return P}static random(min,max){const r=min+Math.random()*(max-min);const phi=Math.random()*Math.PI*2;return new Vec2(r*Math.cos(phi),r*Math.sin(phi))}static subtract(a,b){return new Vec2(a.x-b.x,a.y-b.y)}get angleX(){return Math.atan2(this.y,this.x)}get angleY(){return Math.atan2(this.x,this.y)}get magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y)}get xy(){return[this.x,this.y]}set limit(max){if(this.magnitude>max){this.normalize();this.scale(max)}}set magnitude(m){this.normalize();this.scale(m)}set xy(xy){this.x=xy[0];this.y=xy[1]}add(a){this.x=this.x+a.x;this.y=this.y+a.y;return this}clamp(max,min){const M=this.magnitude;if(M>max)this.magnitude=max;else if(M<min)this.magnitude=min;return this}copy(a){this.xy=a.xy;return this}normalize(){let m=this.magnitude;if(m===0)m=1;else m=1/m;this.x=this.x*m;this.y=this.y*m;return this}rotateAxisZ(phi){[this.x,this.y]=[this.x*Math.cos(phi)-this.y*Math.sin(phi),this.x*Math.sin(phi)+this.y*Math.cos(phi)];return this}scale(val){this.x=this.x*val;this.y=this.y*val;return this}subtract(a){this.x=this.x-a.x;this.y=this.y-a.y;return this}}export class Vec3{constructor(x,y,z){this.x=x||0;this.y=y||0;this.z=z||0}static add(a,b){return new Vec3(a.x+b.x,a.y+b.y,a.z+b.z)}static angleBetween(a,b){const MA=a.magnitude;const MB=b.magnitude;if(MA===0||MB===0){console.error("Cannot divide by zero.");return NaN}return Math.acos(Vec3.dot(a,b)/(MA*MB))}static clone(a){return new Vec3(...a.xyz)}static cross(a,b){return new Vec3(a.y*b.z-b.y*a.z,a.z*b.x-b.z*a.x,a.x*b.y-b.x*a.y)}static distance(a,b){const abx=a.x-b.x;const aby=a.y-b.y;const abz=a.z-b.z;return Math.sqrt(abx*abx+aby*aby+abz*abz)}static distanceChebyshev(a,b){return Math.max(Math.abs(a.x-b.x),Math.abs(a.y-b.y),Math.abs(a.z-b.z))}static distanceManhattan(a,b){return Math.sqrt(Math.abs(a.x-b.x)+Math.abs(a.y-b.y)+Math.abs(a.z-b.z))}static distanceMinkowski(a,b,e){if(e===0){console.error("Cannot divide by zero.");return NaN}return(Math.abs(a.x-b.x)**e+Math.abs(a.y-b.y)**e+Math.abs(a.z-b.z)**e)**(1/e)}static dot(a,b){return a.x*b.x+a.y*b.y+a.z*b.z}static equal(a,b){return a.x===b.x&&a.y===b.y&&a.z===b.z}static fromCopy(a){return new Vec3({...a}.x,{...a}.y,{...a}.z)}static fromCylindricalCoords(radius,phi,z){return new Vec3(radius*Math.cos(phi),radius*Math.sin(phi),z)}static fromSphericalCoords(radius,phi,theta){return new Vec3(radius*Math.sin(theta)*Math.cos(phi),radius*Math.sin(theta)*Math.sin(phi),radius*Math.cos(theta))}static project(a,b){const PM=a.magnitude*Math.cos(Vec3.angleBetween(a,b));const P=Vec3.clone(b);P.normalize();P.scale(PM);return P}static random(min,max){const r=min+Math.random()*(max-min);const phi=Math.random()*Math.PI*2;const theta=Math.random()*Math.PI;return new Vec3(r*Math.sin(theta)*Math.cos(phi),r*Math.sin(theta)*Math.sin(phi),r*Math.cos(theta))}static subtract(a,b){return new Vec3(a.x-b.x,a.y-b.y,a.z-b.z)}get angleX(){return Math.atan2(this.y,this.x)}get angleY(){return Math.atan2(this.x,this.y)}get angleZ(){return Math.acos(this.z/this.magnitude)}get b(){return this.z}get g(){return this.y}get magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}get r(){return this.x}get rgb(){return[this.x,this.y,this.z]}get xyz(){return[this.x,this.y,this.z]}set b(b){this.z=b}set g(g){this.y=g}set limit(max){if(this.magnitude>max){this.normalize();this.scale(max)}}set magnitude(m){this.normalize();this.scale(m)}set r(r){this.x=r}set rgb(rgb){this.x=rgb[0];this.y=rgb[1];this.z=rgb[2]}set xyz(xyz){this.x=xyz[0];this.y=xyz[1];this.z=xyz[2]}add(a){this.x=this.x+a.x;this.y=this.y+a.y;this.z=this.z+a.z;return this}clamp(max,min){const M=this.magnitude;if(M>max)this.magnitude=max;else if(M<min)this.magnitude=min;return this}copy(a){this.xyz=a.xyz;return this}normalize(){let m=this.magnitude;if(m===0)m=1;else m=1/m;this.x=this.x*m;this.y=this.y*m;this.z=this.z*m;return this}rotateAxisX(phi){[this.y,this.z]=[this.z*Math.cos(phi)-this.z*Math.sin(phi),this.z*Math.sin(phi)+this.z*Math.cos(phi)];return this}rotateAxisY(phi){[this.x,this.z]=[this.x*Math.cos(phi)-this.z*Math.sin(phi),-this.x*Math.sin(phi)+this.z*Math.cos(phi)];return this}rotateAxisZ(phi){[this.x,this.y]=[this.x*Math.cos(phi)-this.y*Math.sin(phi),this.x*Math.sin(phi)+this.y*Math.cos(phi)];return this}scale(val){this.x=this.x*val;this.y=this.y*val;this.z=this.z*val;return this}subtract(a){this.x=this.x-a.x;this.y=this.y-a.y;this.z=this.z-a.z;return this}}export class Vec4{constructor(x,y,z,w){this.x=x||0;this.y=y||0;this.z=z||0;this.w=w||0}static add(a,b){return new Vec4(a.x+b.x,a.y+b.y,a.z+b.z,a.w+b.w)}static angleBetween(a,b){const MA=a.magnitude;const MB=b.magnitude;if(MA===0||MB===0){console.error("Cannot divide by zero.");return NaN}return Math.acos(Vec4.dot(a,b)/(MA*MB))}static clone(a){return new Vec4(...a.xyzw)}static distance(a,b){const abx=a.x-b.x;const aby=a.y-b.y;const abz=a.z-b.z;const abw=a.w-b.w;return Math.sqrt(abx*abx+aby*aby+abz*abz+abw*abw)}static distanceChebyshev(a,b){return Math.max(Math.abs(a.x-b.x),Math.abs(a.y-b.y),Math.abs(a.z-b.z),Math.abs(a.w-b.w))}static distanceManhattan(a,b){return Math.sqrt(Math.abs(a.x-b.x)+Math.abs(a.y-b.y)+Math.abs(a.z-b.z)+Math.abs(a.w-b.w))}static distanceMinkowski(a,b,e){if(e===0){console.error("Cannot divide by zero.");return NaN}return(Math.abs(a.x-b.x)**e+Math.abs(a.y-b.y)**e+Math.abs(a.z-b.z)**e+Math.abs(a.w-b.w)**e)**(1/e)}static dot(a,b){return a.x*b.x+a.y*b.y+a.z*b.z+a.w*b.w}static equal(a,b){return a.x===b.x&&a.y===b.y&&a.z===b.z&&a.w===b.w}static fromCopy(a){return new Vec4({...a}.x,{...a}.y,{...a}.z,{...a}.w)}static project(a,b){const PM=a.magnitude*Math.cos(Vec4.angleBetween(a,b));const P=Vec4.clone(b);P.normalize();P.scale(PM);return P}static random(max,min){const a=-.5+Math.random();const b=-.5+Math.random();const c=-.5+Math.random();const d=-.5+Math.random();const v=new Vec4(a,b,c*Math.sqrt((1-a*a-b*b)/(c*c+d*d)),d*Math.sqrt((1-a*a-b*b)/(c*c+d*d)));v.magnitude=min+Math.random()*(max-min);return v}static subtract(a,b){return new Vec4(a.x-b.x,a.y-b.y,a.z-b.z,a.w-b.w)}get a(){return this.w}get angleX(){return Math.atan2(this.y,this.x)}get angleY(){return Math.atan2(this.x,this.y)}get angleZ(){return Math.acos(this.z/this.magnitude)}get b(){return this.z}get g(){return this.y}get magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}get r(){return this.x}get rgba(){return[this.x,this.y,this.z,this.w]}get xyzw(){return[this.x,this.y,this.z,this.w]}set a(a){this.w=a}set b(b){this.z=b}set g(g){this.y=g}set limit(max){if(this.magnitude>max){this.normalize();this.scale(max)}}set magnitude(m){this.normalize();this.scale(m)}set r(r){this.x=r}set rgba(rgba){this.x=rgba[0];this.y=rgba[1];this.z=rgba[2];this.w=rgba[3]}set xyzw(xyzw){this.x=xyzw[0];this.y=xyzw[1];this.z=xyzw[2];this.w=xyzw[3]}add(a){this.x=this.x+a.x;this.y=this.y+a.y;this.z=this.z+a.z;this.w=this.w+a.w;return this}clamp(max,min){const M=this.magnitude;if(M>max)this.magnitude=max;else if(M<min)this.magnitude=min;return this}copy(a){this.xyzw=a.xyzw;return this}normalize(){let m=this.magnitude;if(m===0)m=1;else m=1/m;this.x=this.x*m;this.y=this.y*m;this.z=this.z*m;this.w=this.w*m;return this}scale(val){this.x=this.x*val;this.y=this.y*val;this.z=this.z*val;this.w=this.w*val;return this}subtract(a){this.x=this.x-a.x;this.y=this.y-a.y;this.z=this.z-a.z;this.w=this.w-a.w;return this}}
